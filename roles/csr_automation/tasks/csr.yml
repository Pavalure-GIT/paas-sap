---

#- name: Replace s3 bucket policy with updated access
#  s3_bucket:
#    name: "{{ bucket_name }}"
#    policy: "{{ lookup('template','policy.json') }}"
#    state: present
#    aws_access_key: "{{ management_access_key }}"
#    aws_secret_key: "{{ management_secret_key }}"

#- aws_kms_facts:
#    filters:
#      alias: "{{ key_alias }}"
   # region: "{{ vpc_region }}"
#    aws_access_key: "{{ management_access_key }}"
#    aws_secret_key: "{{ management_secret_key }}"
#  register: kms

#- debug: var=kms

#- debug: var=kms['keys'][0].key_arn
#  register: key_arn

#- debug: var=key_arn

#- name: Update kms key policy for user access
#  aws_kms: 
#  args:
#    mode: grant
#    key_arn: "{{ key_arn }}"
#    #role_name: "Allow use of the key"
#    role_arn: "arn:aws:iam::{{ customer_account }}:root"
#    grant_types: "role"
#    aws_access_key: "{{ management_access_key }}"
#    aws_secret_key: "{{ management_secret_key }}"
#    region: "{{ vpc_region }}"

- name: Create a CSR function stack, pass in the template via an URL
  cloudformation:
    stack_name: "{{ stack_name }}"
    state: present
    region: "{{ vpc_region }}"
    disable_rollback: true
    template_url: https://s3.amazonaws.com/solutions-reference/transit-vpc/latest/transit-vpc-second-account.template
    aws_access_key: "{{ lookup('env','AWS_ACCESS_KEY') }}"
    aws_secret_key: "{{ lookup('env','AWS_SECRET_KEY') }}"
    template_parameters:
      BucketName: "{{ bucket_name }}"
      BucketPrefix: vpnconfigs/
    tags:
      Stack: ansible-cloudformation

- name: Get vpc facts to retreive vpc_id
  ec2_vpc_net_facts:
    filters:
      "tag:Name": "{{ vpc_env_name }}"
    aws_access_key: "{{ lookup('env','AWS_ACCESS_KEY') }}"
    aws_secret_key: "{{ lookup('env','AWS_SECRET_KEY') }}"
    region: "{{ vpc_region }}"
  register: vpc

- debug: var=vpc.vpcs[0].vpc_id
  register: vpc_id_value

- debug: var=vpc_id_value

- name: Create a new unattached vgw
  ec2_vpc_vgw:
     state: present
     asn: 64513
     region: "{{ vpc_region }}"
     name: "{{ vgw_name }}"
     type: ipsec.1
     vpc_id: "{{ vpc.vpcs[0].vpc_id }}"
     tags:
       owner: "{{ vgw_owner }}"
       "{{ vgw_tag }}": 'true'
     aws_access_key: "{{ lookup('env','AWS_ACCESS_KEY') }}"
     aws_secret_key: "{{ lookup('env','AWS_SECRET_KEY') }}"
  register: vgw

- debug: var=vgw

- ec2_vpc_route_table:
    vpc_id: "{{ vgw.vgw.vpc_id }}"
    region: "{{ vpc_region }}"
    tags:
      Name: Management AZ1
    routes:
      - dest: "{{ dr_manaz1_cidr }}"
        vpc_peering_connection_id: "{{ vpc_peer.peering_id }}"
      - dest: 0.0.0.0/0
        gateway_id: "{{ az1ngw }}"
    propagating_vgw_ids: "{{ vgw.vgw.id }}"
  when: dr_compartment

- ec2_vpc_route_table:
    vpc_id: "{{ vgw.vgw.vpc_id }}"
    region: "{{ vpc_region }}"
    tags:
      Name: Management AZ1
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ az1_nat_gateway.nat_gateway_id }}"
    propagating_vgw_ids: "{{ vgw.vgw.id }}"
  when: not dr_compartment

- pause:
    minutes: 5
