---
#eth0
- ec2_eni:
    security_groups: "{{ aws_ec2_vm_eth0_groups }}"
    subnet_id: "{{ aws_ec2_vm_eth0_subnet }}"
    region: "{{ aws_ec2_vm_region }}"
    state: present
  register: eth0

- debug: var=eth0

- set_fact:
     eth0_id: "{{ eth0.interface.id }}"

- debug: var=eth0_id

#eth1
- ec2_eni:
    security_groups: "{{ aws_ec2_vm_eth1_groups }}"
    subnet_id: "{{ aws_ec2_vm_eth1_subnet }}"
    region: "{{ aws_ec2_vm_region }}"
    state: present
  register: eth1
  when: not single_nic

- debug: var=eth1

- set_fact:
     eth1_id: "{{ eth1.interface.id }}"
  when: not single_nic

- debug: var=eth1_id

- name: create "{{ aws_ec2_vm_Name }}"
  ec2:
    image: "{{ aws_ec2_vm_image }}"
    instance_type: "{{ aws_ec2_vm_instance_type }}"
    instance_tags:
      Name: "{{ aws_ec2_vm_Name }} "
    network_interfaces: ["{{ eth0.interface.id }}"]
    key_name: "{{ aws_ec2_vm_key_name }}"
    region: "{{ aws_ec2_vm_region }}"
    wait: true
  register: ec2_vm
  when: single_nic
  
- name: create "{{ aws_ec2_vm_Name }}"
  ec2:
    image: "{{ aws_ec2_vm_image }}"
    instance_type: "{{ aws_ec2_vm_instance_type }}"
    instance_tags:
      Name: "{{ aws_ec2_vm_Name }} "
    network_interfaces: ["{{ eth0.interface.id }}" , "{{ eth1.interface.id }}"]
    key_name: "{{ aws_ec2_vm_key_name }}"
    region: "{{ aws_ec2_vm_region }}"
    wait: true
  register: ec2_vm
  when: not single_nic

- debug: var=ec2_vm

- name: Additional Security Groups
  include_tasks: additional_sgs.yml
