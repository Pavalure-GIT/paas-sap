---
- name: Create DR Infrastructure
  hosts: localhost
  tasks:
    - name: Create VPC, Subnets, NAT Gateways, Route Tables, Security Groups and Route53 Zones
      include_role:
        name: aws-customer-infrastructure
      vars:
        aws_customer_vpc_cidr: "{{ dr_vpc_cidr }}"
        aws_customer_vpc_env_name: "{{ dr_vpc_env_name }}"
        aws_customer_vpc_region: "{{ dr_vpc_region }}"
        publicaz1_cidr: "{{ dr_pubaz1_cidr }}"
        publicaz2_cidr: "{{ dr_pubaz2_cidr }}"
        publicaz3_cidr: "{{ dr_pubaz3_cidr }}"
        managementaz1_cidr: "{{ dr_manaz1_cidr }}"
        managementaz2_cidr: "{{ dr_manaz2_cidr }}"
        managementaz3_cidr: "{{ dr_manaz3_cidr }}"
        customeraz1_cidr: "{{ dr_custaz1_cidr }}"
        customeraz2_cidr: "{{ dr_custaz2_cidr }}"
        customeraz3_cidr: "{{ dr_custaz3_cidr }}"
        clusteraz1_cidr: "{{ dr_clustaz1_cidr }}"
        clusteraz2_cidr: "{{ dr_clustaz2_cidr }}"
        clusteraz3_cidr: "{{ dr_clustaz3_cidr }}"
        aws_customer_vpc_management_cidr: "{{ vpc_management_cidr }}"
        aws_customer_vpc_shortname: "{{ vpc_shortname }}"
        aws_customer_vpc_longname: "{{ vpc_longname }}"
        create_zone: false
        single_az: "{{ dr_single_availability_zone }}"
      when: dr_compartment
    - name: Set VPC ID for DR Peering
      set_fact:
        drvpcid: "{{ customer_network.vpc.id }}"
      when: dr_compartment
    - name: Set DR Management AZ1 Route Table ID for DR Peering
      set_fact:
        drmanaz1rt: "{{ managementaz1_route_table.route_table.route_table_id }}"
      when: dr_compartment
    - name: Set DR Management AZ2 Route Table ID for DR Peering
      set_fact:
        drmanaz2rt: "{{ managementaz2_route_table.route_table.route_table_id }}"
      when: dr_compartment and not dr_single_availability_zone
    - name: Set DR Management AZ3 Route Table ID for DR Peering
      set_fact:
        drmanaz3rt: "{{ managementaz3_route_table.route_table.route_table_id }}"
      when: dr_compartment and not dr_single_availability_zone


- name: Provision Component Machines
  hosts: localhost
  tasks:
    - name: Provision FDE ec2 VM
      include_role:
        name: aws-ec2-vm
      vars:
        aws_ec2_vm_Name: FDE-DR
        aws_ec2_vm_region: "{{ dr_vpc_region }}"
        aws_ec2_vm_key_name: "{{ key_name }}"
        aws_ec2_vm_instance_type: "{{ fde_instance_type }}"
        aws_ec2_vm_image: "{{ dr_fde_image }}"
        aws_ec2_vm_eth1_groups: "{{ mgmt_net_all.group_id }}"
        aws_ec2_vm_eth1_subnet: "{{ managementaz1.subnet.id }}"
        aws_ec2_vm_eth0_groups: "{{ cust_net_all.group_id }}"
        aws_ec2_vm_eth0_subnet: "{{ customeraz1.subnet.id }}"
        single_nic: false
      when: dr_compartment
      
    - name: Provision FDE-2 ec2 VM
      include_role:
        name: aws-ec2-vm
      vars:
        aws_ec2_vm_Name: FDE-DR-2
        aws_ec2_vm_region: "{{ dr_vpc_region }}"
        aws_ec2_vm_key_name: "{{ key_name }}"
        aws_ec2_vm_instance_type: "{{ fde_instance_type }}"
        aws_ec2_vm_image: "{{ dr_fde_image }}"
        aws_ec2_vm_eth1_groups: "{{ mgmt_net_all.group_id }}"
        aws_ec2_vm_eth1_subnet: "{{ managementaz1.subnet.id }}"
        aws_ec2_vm_eth0_groups: "{{ cust_net_all.group_id }}"
        aws_ec2_vm_eth0_subnet: "{{ customeraz1.subnet.id }}"
        single_nic: false
      when: dr_ha

    - route53:
        state: present
        zone: "{{ vpc_shortname }}"
        record: "fdedr.{{ vpc_shortname }}"
        type: A
        private_zone: yes
        ttl: 300
        value: "{{ eth1.interface.private_ip_address }}"
        wait: yes
      when: dr_compartment

    - route53:
        state: present
        zone: "{{ vpc_longname }}"
        record: "fdedr.{{ vpc_longname }}"
        type: A
        private_zone: yes
        ttl: 300
        value: "{{ eth0.interface.private_ip_address }}"
        wait: yes
      when: dr_compartment
        
    - route53:
        state: present
        zone: in-addr.arpa
        hosted_zone_id: "{{ rev_zone }}"
        record: "{{ eth0.interface.private_ip_address | ipaddr('revdns') }}"
        type: PTR
        private_zone: yes
        ttl: 300
        value: "fdedr.{{ vpc_longname }}"
        wait: yes
      when: dr_compartment
      
    - name: Provision MidServerA ec2 VM DR
      include_role:
        name: aws-ec2-vm
      vars:
        aws_ec2_vm_Name: MidServerA-DR
        aws_ec2_vm_region: "{{ dr_vpc_region }}"
        aws_ec2_vm_key_name: "{{ key_name }}"
        aws_ec2_vm_instance_type: "{{ mid_instance_type }}"
        aws_ec2_vm_image: "{{ dr_mid_image }}"
        aws_ec2_vm_eth0_groups: "{{ mgmt_net_all.group_id }}"
        aws_ec2_vm_eth0_subnet: "{{ managementaz1.subnet.id }}"
        single_nic: true
      when: dr_compartment
        
    - name: Provision MidServerB ec2 VM DR
      include_role:
        name: aws-ec2-vm
      vars:
        aws_ec2_vm_Name: MidServerB-DR
        aws_ec2_vm_region: "{{ dr_vpc_region }}"
        aws_ec2_vm_key_name: "{{ key_name }}"
        aws_ec2_vm_instance_type: "{{ mid_instance_type }}"
        aws_ec2_vm_image: "{{ dr_mid_image }}"
        aws_ec2_vm_eth0_groups: "{{ mgmt_net_all.group_id }}"
        aws_ec2_vm_eth0_subnet: "{{ managementaz1.subnet.id }}"
        single_nic: true
      when: dr_compartment

    - name: Provision SAP Router ec2 VM
      include_role:
        name: aws-ec2-vm
      vars:
        aws_ec2_vm_Name: SAPRouter-DR
        aws_ec2_vm_region: "{{ dr_vpc_region }}"
        aws_ec2_vm_key_name: "{{ key_name }}"
        aws_ec2_vm_instance_type: "{{ proxy_instance_type }}"
        aws_ec2_vm_image: "{{ dr_proxy_image }}"
        aws_ec2_vm_eth1_groups: "{{ mgmt_net_all.group_id }}"
        aws_ec2_vm_eth1_subnet: "{{ managementaz1.subnet.id }}"
        aws_ec2_vm_eth0_groups: "{{ pub_net_all.group_id }}"
        aws_ec2_vm_eth0_subnet: "{{ publicaz1.subnet.id }}"
        single_nic: false
      when: dr_compartment
      
    - name: Provision SAP Router ec2 VM
      include_role:
        name: aws-ec2-vm
      vars:
        aws_ec2_vm_Name: SAPRouter-DR
        aws_ec2_vm_region: "{{ dr_vpc_region }}"
        aws_ec2_vm_key_name: "{{ key_name }}"
        aws_ec2_vm_instance_type: "{{ proxy_instance_type }}"
        aws_ec2_vm_image: "{{ dr_proxy_image }}"
        aws_ec2_vm_eth1_groups: "{{ mgmt_net_all.group_id }}"
        aws_ec2_vm_eth1_subnet: "{{ managementaz1.subnet.id }}"
        aws_ec2_vm_eth0_groups: "{{ pub_net_all.group_id }}"
        aws_ec2_vm_eth0_subnet: "{{ publicaz1.subnet.id }}"
        single_nic: false
      when: dr_ha

    - route53:
        state: present
        zone: "{{ vpc_shortname }}"
        record: "proxydr.{{ vpc_shortname }}"
        type: A
        private_zone: yes
        ttl: 300
        value: "{{ eth1.interface.private_ip_address }}"
        wait: yes
      when: dr_compartment
    
    - route53:
        state: present
        zone: "{{ vpc_longname }}"
        record: "proxydr.{{ vpc_longname }}"
        type: A
        private_zone: yes
        ttl: 300
        value: "{{ eth0.interface.private_ip_address }}"
        wait: yes
      when: dr_compartment
        
    - route53:
        state: present
        zone: in-addr.arpa
        hosted_zone_id: "{{ rev_zone }}"
        record: "{{ eth0.interface.private_ip_address | ipaddr('revdns') }}"
        type: PTR
        private_zone: yes
        ttl: 300
        value: "proxydr.{{ vpc_longname }}"
        wait: yes
      when: dr_compartment
      
    - name: Peer VPCs
      include_role:
        name: peer
      vars:
        region1: "{{ existing_vpc_region }}"
        vpc1: "{{ existing_vpc_id }}"
        region2: "{{ dr_vpc_region }}"
        vpc2: "{{ drvpcid }}"
        peer_name: "DR Peering"
      when: dr_compartment

    - name: Update Route Table Management AZ1
      ec2_vpc_route_table:
        vpc_id: "{{ existing_vpc_id }}"
        region: "{{ existing_vpc_region }}"
        route_table_id: "{{ existing_management_route_table_az1_id }}"
        tags:
          Name: Management AZ1
        routes:
          - dest: "{{ dr_manaz1_cidr }}"
            vpc_peering_connection_id: "{{ vpc_peer.peering_id }}"
      when: dr_compartment
      
    - name: Update Route Table Management AZ2
      ec2_vpc_route_table:
        vpc_id: "{{ existing_vpc_id }}"
        region: "{{ existing_vpc_region }}"
        route_table_id: "{{ existing_management_route_table_az2_id }}"
        tags:
          Name: Management AZ2
        routes:
          - dest: "{{ dr_manaz2_cidr }}"
            vpc_peering_connection_id: "{{ vpc_peer.peering_id }}"
      when: dr_compartment and not dr_single_availability_zone
      
    - name: Update Route Table Management AZ3
      ec2_vpc_route_table:
        vpc_id: "{{ existing_vpc_id }}"
        region: "{{ existing_vpc_region }}"
        route_table_id: "{{ existing_management_route_table_az3_id }}"
        tags:
          Name: Management AZ3
        routes:
          - dest: "{{ dr_manaz3_cidr }}"
            vpc_peering_connection_id: "{{ vpc_peer.peering_id }}"
      when: dr_compartment and not dr_single_availability_zone
      
    - name: Update DR Route Table Management AZ1
      ec2_vpc_route_table:
        vpc_id: "{{ drvpcid }}"
        region: "{{ dr_vpc_region }}"
        route_table_id: "{{ drmanaz1rt }}"
        tags:
          Name: Management AZ1
        routes:
          - dest: "{{ existing_management_route_table_az1_cidr }}"
            vpc_peering_connection_id: "{{ vpc_peer.peering_id }}"
      when: dr_compartment
      
    - name: Update DR Route Table Management AZ2
      ec2_vpc_route_table:
        vpc_id: "{{ drvpcid }}"
        region: "{{ dr_vpc_region }}"
        route_table_id: "{{ drmanaz2rt }}"
        tags:
          Name: Management AZ2
        routes:
          - dest: "{{ existing_management_route_table_az2_cidr }}"
            vpc_peering_connection_id: "{{ vpc_peer.peering_id }}"
      when: dr_compartment and not dr_single_availability_zone
      
    - name: Update DR Route Table Management AZ3
      ec2_vpc_route_table:
        vpc_id: "{{ drvpcid }}"
        region: "{{ dr_vpc_region }}"
        route_table_id: "{{ drmanaz3rt }}"
        tags:
          Name: Management AZ3
        routes:
          - dest: "{{ existing_management_route_table_az3_cidr }}"
            vpc_peering_connection_id: "{{ vpc_peer.peering_id }}"
      when: dr_compartment and not dr_single_availability_zone
      
    - ec2_group:
        name: mgmt-net-all
        description: Every AWS interface in the VPCs AZ1 2 3 management networks must be assigned to this security group
        vpc_id: "{{ drvpcid }}"
        region: "{{ dr_vpc_region }}"
        rules:
          - proto: -1
            ports: 0
            cidr_ip: 172.64.0.0/12
      register: mgmt_net_all_dr
      when: dr_compartment
